#!/usr/bin/env python
import gflags
import sys
import eventlet

from eventlet.greenpool import GreenPool
from benchmark.flags import FLAGS
from benchmark.agent import LocalSystem
from pystatsd import Client

def usage(e):
    """ prints usage for benchagent """
    print '%s\nUsage: %s ARGS\n%s' % (e, sys.argv[0], FLAGS)
    sys.exit(1)

def _innerLoop(interval=1):
    """ loops to do recurring data collection, sleeping 'interval' (default 1) second """
    pystats_client = Client(host=FLAGS.graphite_server, port=FLAGS.graphite_port)
    my_system = LocalSystem()
    hostname = my_system.hostname()
    die_die_die = False
    while not(die_die_die):
        (one, five, fifteen) = my_system.load_avg()
        stat_dict = {}
        stat_dict["%s.load.1" % hostname]=one
        stat_dict["%s.load.5" % hostname]=five
        stat_dict["%s.load.15" % hostname]=fifteen
        for stat_name in stat_dict:
            print stat_name, stat_dict[stat_name]
            pystats_client.update_stats(stat_name,stat_dict[stat_name])
        eventlet.sleep(1)

def main(argv):
    """main setup for benchagent - runs the rest of this good stuff..."""

    try:
        argv = FLAGS(argv)
    except gflags.FlagsError as e:
        usage(e)
    print "publishing stats to %s:%s (expected to be a stastd service endpoint)" % \
            (FLAGS.graphite_server, FLAGS.graphite_port)
    # Set up a basic pool and spawn our worker...
    pool = GreenPool()
    pool.spawn_n(_innerLoop)
    # iterate until the cows come home...
    try:
        while(True):
            eventlet.sleep(5)
    except KeyboardInterrupt:
        sys.exit(1)
if __name__ == '__main__':
    main(sys.argv)
